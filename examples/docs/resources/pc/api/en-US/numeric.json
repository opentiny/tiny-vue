{
  "attrs": [
    {
      "name": "circulate",
      "sample": "max-min",
      "type": "Boolean",
      "desc": "When the maximum value is reached, start from the minimum value or vice versa.",
      "defaultValue": "The default value of this attribute is false."
    },
    {
      "name": "mouse-wheel",
      "sample": "mouse-wheel",
      "type": "Boolean",
      "desc": "Sets whether to change the value of the scroll wheel.",
      "defaultValue": "The default value of this attribute is true."
    },
    {
      "name": "modelValue / v-model",
      "sample": "basic-usage",
      "type": "Number",
      "desc": "Set the default value of the input component. The default value is 0.",
      "defaultValue": "The default value of this attribute is 0"
    },
    {
      "name": "min",
      "sample": "max-min",
      "type": "Number",
      "desc": "Specify the minimum value that can be entered for a component to create a valid value range. Integers and decimals are supported. ;Set the minimum allowed value of the counter",
      "defaultValue": "The default value of this attribute is -Infinity"
    },
    {
      "name": "max",
      "sample": "max-min",
      "type": "Number",
      "desc": "Maximum value that can be entered in a component to create a valid value range. Integers and decimals are supported. ;Set the maximum allowed value of the counter",
      "defaultValue": "The default value of this attribute is Infinity."
    },
    {
      "name": "step",
      "sample": "about-step",
      "type": "Number",
      "desc": "Set the value to be increased or decreased by pressing the up and down arrow keys or clicking the up and down buttons. The default step is 1.",
      "defaultValue": "The default value of this attribute is 1"
    },
    {
      "name": "step-strictly",
      "sample": "about-step",
      "type": "Boolean",
      "desc": "Whether to enter only multiples of step",
      "defaultValue": "The default value of this attribute is false."
    },
    {
      "name": "size",
      "sample": "numeric-size",
      "type": "String",
      "desc": "Counter size; The optional values of this attribute are medium / small / mini",
      "defaultValue": ""
    },
    {
      "name": "disabled",
      "sample": "dynamic-disabled",
      "type": "Boolean",
      "desc": "Whether to disable the counter",
      "defaultValue": "The default value of this attribute is false."
    },
    {
      "name": "controls",
      "sample": "controls",
      "type": "Boolean",
      "desc": "Whether to use the control button",
      "defaultValue": "The default value of this attribute is true."
    },
    {
      "name": "controls-position",
      "sample": "controls",
      "type": "String",
      "desc": "Control button position; The optional value of this attribute is right",
      "defaultValue": ""
    },
    {
      "name": "name",
      "sample": "controls2",
      "type": "String",
      "desc": "Native attribute",
      "defaultValue": ""
    },
    {
      "name": "label",
      "sample": "controls",
      "type": "String",
      "desc": "Label text associated with the text box",
      "defaultValue": ""
    },
    {
      "name": "placeholder",
      "sample": "calculate-according-to-num-of-goods",
      "type": "String",
      "desc": "Set the placeholder text in the text box.",
      "defaultValue": ""
    },
    {
      "name": "precision",
      "sample": "precision",
      "type": "Number",
      "desc": "Numeric precision",
      "defaultValue": ""
    },
    {
      "name": "format",
      "sample": "",
      "type": "Object",
      "desc": "Number formatting configuration item. The following fields can be configured:; {\n fraction: 4, //Retain the number of decimal places. \n rounding: 0, //Round the number between 0 and 9. For example, if this parameter is set to 7, the value is rounded off to 6. The default value is 5 (rounded off). If this parameter is set to 0 or greater than 9, truncation is performed. \n prefix: '$', //Prefix identifier. \n groupSize: 3, //Integer part grouping interval, that is, the number of bits of the first grouping. \n secondaryGroupSize: 2, //Integer part second-level grouping interval. If this parameter is not set or is set to 0, the value of groupSize is automatically used. \n groupSeparator: ',', //Integer part grouping separator. \n decimalSeparator:' ', / / Decimal point symbol \n fractionGroupSize: 0, // Decimal part grouping interval \n fractionGroupSeparator: '', / / Decimal grouping separator \n suffix: '@' / / Post identifier \n}",
      "defaultValue": ""
    },
    {
      "name": "allow-empty",
      "sample": "allow-empty",
      "type": "Boolean",
      "desc": "The counter can be cleared.",
      "defaultValue": "The default value of this attribute is false, indicating that this attribute cannot be cleared."
    }
  ],
  "events": [
    {
      "name": "focus",
      "sample": "focus-event",
      "type": "Function(arg1)",
      "desc": "Sets the callback function triggered when a component obtains the focus.; onFocus(arg1){\n// arg1 = event // do something you want...}",
      "defaultValue": ""
    },
    {
      "name": "blur",
      "sample": "blur-event",
      "type": "Function(arg1)",
      "desc": "Sets the callback function triggered when a component loses focus. ; onBlur(arg1){\n// arg1 = event arg1 is an event object.\n// do something you want...}",
      "defaultValue": ""
    },
    {
      "name": "change",
      "sample": "change-event",
      "type": "Function(arg1, arg2)",
      "desc": "Sets the callback function triggered when the value of a component changes.; onChange(arg1, arg2){\n// arg1 = newVal/\n/arg2 = oldVal\n// do something you want...}",
      "defaultValue": ""
    }
  ]
}