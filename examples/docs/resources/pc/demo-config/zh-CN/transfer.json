[
    {
        "title": "基本用法",
        "content": "<p>通过 <code>value</code> 属性进行双向绑定，其指定的值为默认选择的值，将展示在右侧列表。\n\n<code>data</code> 属性提供数据源，其是一个对象数组，对象中默认字段有 key、label、disabled 。</p>\n",
        "link": "transfer/basic-usage",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "basic-usage"
    },
    {
        "title": "数据源",
        "content": "<p>可请求服务获取数据，再将数据赋予 <code>data</code> 。</p>\n",
        "link": "transfer/data-source",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "data-source"
    },
    {
        "title": "展示全部移动按钮",
        "content": "<p>可通过 <code>show-all-btn</code> 属性设置展示全部移动按钮。</p>\n",
        "link": "transfer/show-all-btn",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "show-all-btn"
    },
    {
        "title": "自定义列表标题",
        "content": "<p>通过 <code>titles</code> 属性可对左右列表的标题进行自定义。</p>\n",
        "link": "transfer/custom-transfer-titles",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "custom-transfer-titles"
    },
    {
        "title": "自定义按钮文案",
        "content": "<p>通过 <code>button-texts</code> 属性自定义左右穿梭的按钮文本。</p>\n",
        "link": "transfer/custom-button-texts",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "custom-button-texts"
    },
    {
        "title": "搜索框占位符",
        "content": "<p>通过 <code>filter-placeholder</code> 属性自定义搜索框占位符。</p>\n",
        "link": "transfer/filter-placeholder",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "filter-placeholder"
    },
    {
        "title": "自定义搜索方法",
        "content": "<p>提供 <code>filter-method</code> 钩子函数，可自定义搜索的方法。</p>\n",
        "link": "transfer/custom-filter-method",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "custom-filter-method"
    },
    {
        "title": "默认勾选项",
        "content": "<p>通过 <code>left-default-checked</code>、<code>right-default-checked</code> 属性分别指定左右侧列表默认的勾选数据。</p>\n",
        "link": "transfer/default-checked",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "default-checked"
    },
    {
        "title": "自定义数据项渲染",
        "content": "<p>使用 render-content 自定义数据项</p>\n",
        "link": "transfer/custom-render-content",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "custom-render-content"
    },
    {
        "title": "列表顶部勾选状态文案",
        "content": "<p>指定 <code>format</code> 属性后，勾选数据时，左右侧列表顶部将展示已勾选数据和所有数据的比值。</p>\n",
        "link": "transfer/checked-format-text",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "checked-format-text"
    },
    {
        "title": "可搜索",
        "content": "<p>通过 <code>filterable</code> 属性开启左右侧列表的搜索功能。</p>\n",
        "link": "transfer/filterable",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "filterable"
    },
    {
        "title": "数据源的字段别名",
        "content": "<p>当数据对象中的字段和默认不一致时，可通过 <code>props</code> 属性进行映射。</p>\n",
        "link": "transfer/props-of-data-source",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "props-of-data-source"
    },
    {
        "title": "右侧排序策略",
        "content": "<p>通过 <code>target-order</code> 属性设置右侧列表元素的排序策略，有 original、push、unshift 三个选项，默认为 original 。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">排序策略</p>\n<p>若为 original，则保持与数据源相同的顺序\n若为 push，则新加入的元素排在最后\n若为 unshift，则新加入的元素排在最前</p>\n</div>\n",
        "link": "transfer/target-order",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "target-order"
    },
    {
        "title": "左右拖拽",
        "content": "<div class=\"tip custom-block\"><p class=\"custom-block-title\">使用拖拽功能时请先安装 sortablejs 插件</p>\n</div>\n<p>通过 <code>drop-config</code> 属性配置 sortablejs 插件进行左右拖拽穿梭。</p>\n",
        "link": "transfer/drop-config",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "drop-config"
    },
    {
        "title": "穿梭框事件",
        "content": "<p>主要有 <code>change</code>、<code>left-check-change</code>、<code>right-check-change</code> 三个事件。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">事件说明</p>\n<p>change：右侧列表元素变化时触发\nleft-check-change：左侧列表元素被用户选中 / 取消选中时触发\nright-check-change：右侧列表元素被用户选中 / 取消选中时触发</p>\n</div>\n",
        "link": "transfer/transfer-events",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "transfer-events"
    },
    {
        "title": "手动清空搜索框",
        "content": "<p>调用 <code>clearQuery()</code> 方法可清空左右侧列表的搜索框，参数为 left 或者 right 。</p>\n",
        "link": "transfer/manual-clear-query",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "manual-clear-query"
    },
    {
        "title": "自定义列表底部",
        "content": "<p>通过 <code>left-footer</code>、<code>right-footer</code> 插槽可分别对左右列表底部进行自定义。</p>\n",
        "link": "transfer/custom-footer",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "custom-footer"
    },
    {
        "title": "面板插槽",
        "content": "<p>可通过 <code>left-panel</code> 和 <code>right-panel</code> 自定义左、右侧面板内容；通过 <code>button-panel</code> 自定义穿梭按钮</p>\n",
        "link": "transfer/panel-slot",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "panel-slot"
    },
    {
        "title": "嵌套表格",
        "content": "<p>当 <code>render</code> 属性里的 <code>plugin</code> 设置为 <code>Table</code> 时指定穿梭框渲染成表格，具体配置可参考 <code>grid</code> 组件的配置。</p>\n",
        "link": "transfer/nested-table",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "nested-table"
    },
    {
        "title": "嵌套树",
        "content": "<p>当 <code>render</code> 属性里的 <code>plugin</code> 设置为 <code>Tree</code> 时指定穿梭框渲染成树，通过 <code>treeConfig</code> 属性配置树相关的配置（具体配置可参考 <code>tree</code> 组件的配置）。</p>\n",
        "link": "transfer/nested-tree",
        "component": " Transfer 穿梭框",
        "findIntroStr": "穿梭框，提供表格数据的双向选择。",
        "demoId": "nested-tree"
    }
]